//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KangSaw_byeok.SquidGameRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SquidGameRef.IService", CallbackContract=typeof(KangSaw_byeok.SquidGameRef.IServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/GetAllUsers")]
        void GetAllUsers(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/GetAllUsers")]
        System.Threading.Tasks.Task GetAllUsersAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Subscribe")]
        void Subscribe(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Subscribe")]
        System.Threading.Tasks.Task SubscribeAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/UnSubscribe")]
        void UnSubscribe(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/UnSubscribe")]
        System.Threading.Tasks.Task UnSubscribeAsync(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/GetAllUsersCallback")]
        void GetAllUsersCallback(string[] users);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/SubscribeCallback")]
        void SubscribeCallback(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/UnSubscribeCallback")]
        void UnSubscribeCallback(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : KangSaw_byeok.SquidGameRef.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<KangSaw_byeok.SquidGameRef.IService>, KangSaw_byeok.SquidGameRef.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void GetAllUsers(string userName, string password) {
            base.Channel.GetAllUsers(userName, password);
        }
        
        public System.Threading.Tasks.Task GetAllUsersAsync(string userName, string password) {
            return base.Channel.GetAllUsersAsync(userName, password);
        }
        
        public void Subscribe(string userName) {
            base.Channel.Subscribe(userName);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(string userName) {
            return base.Channel.SubscribeAsync(userName);
        }
        
        public void UnSubscribe(string userName) {
            base.Channel.UnSubscribe(userName);
        }
        
        public System.Threading.Tasks.Task UnSubscribeAsync(string userName) {
            return base.Channel.UnSubscribeAsync(userName);
        }
    }
}
